process starts
"would you like to login or create an account?"
>>> (create/login) 
types one of the two
-> handles creating or logging in, all blocking

commands
>>> help
>>> list
>>> check_voicemail
>>> delete
>>> logout (optional?)
>>> sendto: <name> msg: <msg>

(Time server received the message) Time: <time>, From: <name>, 

client:
-create account or login at the beginning
-in either case, wait for confirmation from the server

-two side processes, one listening for messages from the server, one listening
for keystrokes
-main processes polls both

-sends message to server with to, from, time metadata
-receives all messages (sent and received) from the server
-needs to handle the server closing the connection

server:
-maintains list of accounts
-maintain list of accounts that are logged in
    -dictionary with ClientSocket object

-use select

-maintains queue for each account of messages that need to be delivered.
Messages are only added if they fail to deliver, otherwise they never make it
into the queue
-fail to deliver = client socket closed
-when the server receives a message from a client it sends it back to BOTH
sender and receiver
-when the server receives a request for messages, it sends all the undelivered
messages to the given client, and assumes they will be delivered properly

-implement database in files
    -store all accounts
    -store undelivered messages for each account
    -store all list of messages

wire protocol:
version: 2 byte
length: 200 bytes


-------------------------------------------

tasks:

# Either client or server can just say send this json to this address
-define exact wire protocal and implement in python
-define socket level communication and blocking/nonblocking loops

# chat functionality
-multiprocessing for client
-message logic for creating account/logging for client = main loop

# server
-select code in server
